# DelivX - Script de Inicializa√ß√£o Melhorado
param(
    [switch]$SkipSeed = $false
)

function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

Write-ColorOutput Green "üöÄ Iniciando servidor DelivX..."
Write-Output ""

# Navegar para o diret√≥rio do backend
$backendPath = "c:\Delivery\delivx\backend"
if (Test-Path $backendPath) {
    Set-Location $backendPath
    Write-ColorOutput Green "‚úÖ Navegando para: $backendPath"
} else {
    Write-ColorOutput Red "‚ùå Erro: Diret√≥rio n√£o encontrado: $backendPath"
    exit 1
}

# Verificar se o Gemfile existe
if (-not (Test-Path "Gemfile")) {
    Write-ColorOutput Red "‚ùå Erro: Gemfile n√£o encontrado"
    Write-ColorOutput Yellow "Certifique-se de que est√° no diret√≥rio correto"
    exit 1
}

Write-ColorOutput Green "‚úÖ Gemfile encontrado!"
Write-Output ""

# Instalar depend√™ncias
Write-ColorOutput Yellow "üì¶ Instalando depend√™ncias..."
try {
    & bundle install
    if ($LASTEXITCODE -ne 0) {
        throw "Erro ao instalar depend√™ncias"
    }
    Write-ColorOutput Green "‚úÖ Depend√™ncias instaladas com sucesso!"
} catch {
    Write-ColorOutput Red "‚ùå Erro ao instalar depend√™ncias: $_"
    exit 1
}

Write-Output ""

# Verificar e configurar banco de dados
Write-ColorOutput Yellow "üóÑÔ∏è Configurando banco de dados..."
try {
    # Criar banco se n√£o existir
    & bundle exec rails db:create 2>$null
    
    # Executar migra√ß√µes
    & bundle exec rails db:migrate
    if ($LASTEXITCODE -ne 0) {
        throw "Erro nas migra√ß√µes"
    }
    
    Write-ColorOutput Green "‚úÖ Banco de dados configurado!"
} catch {
    Write-ColorOutput Red "‚ùå Erro ao configurar banco: $_"
    exit 1
}

# Popular dados de exemplo (opcional)
if (-not $SkipSeed) {
    Write-Output ""
    Write-ColorOutput Yellow "üå± Populando dados de exemplo..."
    try {
        & bundle exec rails db:seed
        Write-ColorOutput Green "‚úÖ Dados de exemplo criados!"
    } catch {
        Write-ColorOutput Yellow "‚ö†Ô∏è Aviso: Erro ao popular dados (pode ser normal se j√° existirem)"
    }
}

Write-Output ""
Write-ColorOutput Green "üöÄ Iniciando servidor Rails..."
Write-ColorOutput Cyan "‚úÖ API estar√° dispon√≠vel em: http://localhost:3000/api/v1"
Write-ColorOutput Cyan "‚úÖ Teste: http://localhost:3000/api/v1/restaurants"
Write-ColorOutput Cyan "‚úÖ Frontend: Abra c:\Delivery\delivx\frontend\index.html no navegador"
Write-Output ""
Write-ColorOutput Yellow "Pressione Ctrl+C para parar o servidor"
Write-Output ""

# Iniciar servidor
try {
    & bundle exec rails server -p 3000 -b 0.0.0.0
} catch {
    Write-ColorOutput Red "‚ùå Erro ao iniciar servidor: $_"
    Write-Output ""
    Write-ColorOutput Yellow "Tente executar manualmente:"
    Write-ColorOutput White "cd c:\Delivery\delivx\backend"
    Write-ColorOutput White "bundle exec rails server"
}

Write-Output ""
Write-ColorOutput Green "Pressione qualquer tecla para sair..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
